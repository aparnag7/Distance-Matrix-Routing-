{"version":3,"sources":["App.js","index.js"],"names":["App","mapElement","useRef","useState","map","setMap","longitude","setLongitude","latitude","setLatitude","converToPoints","lnglat","point","lat","lng","useEffect","origin","destinations","tt","key","container","current","stylesVisibility","trafficIncidents","trafficFlow","center","zoom","popup","offset","bottom","setHTML","element","document","createElement","className","marker","draggable","setLngLat","addTo","on","getLngLat","setPopup","togglePopup","addMarker","recalculateRoutes","locations","callParameters","origins","Promise","resolve","reject","ttapi","matrixRouting","then","matrixAPIResults","resultsArray","matrix","result","index","location","drivingtime","response","routeSummary","travelTimeInSeconds","sort","a","b","sortedLocations","sortDestinations","sorted","unshift","calculateRoute","routeData","geojson","getLayer","removeLayer","removeSource","addLayer","id","type","source","data","paint","drawRoute","toGeoJson","e","push","lngLat","addDeliveryMarker","remove","ref","placeholder","onChange","target","value","ReactDOM","render","StrictMode","getElementById"],"mappings":"8MAyKeA,EAnKH,WACV,IAAMC,EAAaC,mBACnB,EAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAkCF,mBAAS,UAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAgCJ,mBAAS,UAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAiB,SAACC,GACtB,MAAO,CACLC,MAAO,CACLJ,SAAUG,EAAOE,IACjBP,UAAWK,EAAOG,OAoIxB,OAlGAC,qBAAU,WACR,IAAMC,EAAS,CACbF,IAAKR,EACLO,IAAKL,GAEDS,EAAe,GACjBb,EAAMc,MAAO,CACfC,IAAK,mCACLC,UAAWnB,EAAWoB,QACtBC,iBAAkB,CAChBC,kBAAkB,EAClBC,aAAa,GAEfC,OAAQ,CAACnB,EAAWE,GACpBkB,KAAM,KAERrB,EAAOD,IAEW,WAChB,IAGMuB,EAAQ,IAAIT,QAAS,CAAEU,OAHT,CAClBC,OAAQ,CAAC,GAAI,OAEqCC,QAAQ,gBAEtDC,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAY,SACpB,IAAMC,EAAS,IAAIjB,SAAU,CAC3BkB,WAAW,EACXL,QAASA,IAERM,UAAU,CAAC/B,EAAWE,IACtB8B,MAAMlC,GAET+B,EAAOI,GAAG,WAAW,WACnB,IAAM5B,EAASwB,EAAOK,YACtBjC,EAAaI,EAAOG,KACpBL,EAAYE,EAAOE,QAErBsB,EAAOM,SAASd,GAAOe,cAEzBC,GAEA,IAgCMC,EAAoB,YAhCD,SAACC,GACxB,IAGMC,EAAiB,CACrB3B,IAAK,mCACLF,aAL2B4B,EAAUzC,KAAI,SAACa,GAC1C,OAAOP,EAAeO,MAKtB8B,QAAS,CAACrC,EAAeM,KAE3B,OAAO,IAAIgC,SAAQ,SAACC,EAASC,GAC3BC,WACGC,cAAcN,GACdO,MAAK,SAACC,GACL,IACMC,EADUD,EAAiBE,OAAO,GACXpD,KAAI,SAACqD,EAAQC,GACxC,MAAO,CACLC,SAAUd,EAAUa,GACpBE,YAAaH,EAAOI,SAASC,aAAaC,wBAG9CR,EAAaS,MAAK,SAACC,EAAGC,GACpB,OAAOD,EAAEL,YAAcM,EAAEN,eAE3B,IAAMO,EAAkBZ,EAAanD,KAAI,SAACqD,GACxC,OAAOA,EAAOE,YAEhBV,EAAQkB,UAOdC,CAAiBnD,GAAcoC,MAAK,SAACgB,GACnCA,EAAOC,QAAQtD,GAEfmC,WACGoB,eAAe,CACdpD,IAAK,mCACL0B,UAAWwB,IAEZhB,MAAK,SAACmB,IAtGG,SAACC,EAASrE,GACtBA,EAAIsE,SAAS,WACftE,EAAIuE,YAAY,SAChBvE,EAAIwE,aAAa,UAEnBxE,EAAIyE,SAAS,CACXC,GAAI,QACJC,KAAM,OACNC,OAAQ,CACND,KAAM,UACNE,KAAMR,GAERS,MAAO,CACL,aAAc,UACd,aAAc,KA0FVC,CADgBX,EAAUY,YACPhF,UAU3B,OANAA,EAAImC,GAAG,SAAS,SAAC8C,GACfpE,EAAaqE,KAAKD,EAAEE,QAvHE,SAAC5E,EAAQP,GACjC,IAAM2B,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAY,kBACpB,IAAIhB,SAAU,CACZa,QAASA,IAERM,UAAU1B,GACV2B,MAAMlC,GAiHPoF,CAAkBH,EAAEE,OAAQnF,GAC5BwC,OAGK,kBAAMxC,EAAIqF,YAChB,CAACnF,EAAWE,IAGb,mCACGJ,GACC,sBAAK8B,UAAU,MAAf,UACE,qBAAKwD,IAAKzF,EAAYiC,UAAU,QAEhC,sBAAKA,UAAU,aAAf,UACE,2CACA,uBAAO6C,KAAK,OAAOD,GAAG,YAAY5C,UAAU,YAC1CyD,YAAY,kBAAkBC,SAAU,SAACP,GAAQ9E,EAAa8E,EAAEQ,OAAOC,UACzE,uBAAOf,KAAK,OAAOD,GAAG,WAAW5C,UAAU,WACzCyD,YAAY,iBAAiBC,SAAU,SAACP,GAAQ5E,EAAY4E,EAAEQ,OAAOC,aAEzE,uBACA,uCAAS,oCAAS,mDAAT,OAAT,aC9JVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjE,SAASkE,eAAe,W","file":"static/js/main.0b8376fb.chunk.js","sourcesContent":["import './App.css'\nimport React, { useRef, useEffect, useState } from \"react\";\nimport * as tt from '@tomtom-international/web-sdk-maps';\nimport '@tomtom-international/web-sdk-maps/dist/maps.css';\nimport * as ttapi from '@tomtom-international/web-sdk-services';\n\nconst App = () => {\n  const mapElement = useRef()\n  const [map, setMap] = useState({})\n  const [longitude, setLongitude] = useState(80.27847)\n  const [latitude, setLatitude] = useState(13.08784)\n\n  const converToPoints = (lnglat) => {\n    return {\n      point: {\n        latitude: lnglat.lat,\n        longitude: lnglat.lng,\n      }\n    }\n  }\n\n  const addDeliveryMarker = (lnglat, map) => {\n    const element = document.createElement('div')\n    element.className = 'marker-delivery'\n    new tt.Marker({\n      element: element\n    })\n      .setLngLat(lnglat)\n      .addTo(map)\n  }\n\n  const drawRoute = (geojson, map) => {\n    if (map.getLayer('route')) {\n      map.removeLayer('route')\n      map.removeSource('route')\n    }\n    map.addLayer({\n      id: 'route',\n      type: 'line',\n      source: {\n        type: 'geojson',\n        data: geojson\n      },\n      paint: {\n        'line-color': '#4a90e2',\n        'line-width': 6\n      }\n    })\n  }\n\n  useEffect(() => {\n    const origin = {\n      lng: longitude,\n      lat: latitude,\n    }\n    const destinations = []\n    let map = tt.map({\n      key: 'uBSIqJb79yM8Efb3XuYYGdUJ9IxQRwIf',\n      container: mapElement.current,\n      stylesVisibility: {\n        trafficIncidents: true,\n        trafficFlow: true,\n      },\n      center: [longitude, latitude],\n      zoom: 14\n    })\n    setMap(map)\n\n    const addMarker = () => {\n      const popupOffset = {\n        bottom: [0, -25]\n      }\n      const popup = new tt.Popup({ offset: popupOffset }).setHTML('This is You!')\n\n      const element = document.createElement('div')\n      element.className = \"marker\"\n      const marker = new tt.Marker({\n        draggable: true,\n        element: element\n      })\n        .setLngLat([longitude, latitude])\n        .addTo(map)\n\n      marker.on('dragend', () => {\n        const lnglat = marker.getLngLat()\n        setLongitude(lnglat.lng)\n        setLatitude(lnglat.lat)\n      })\n      marker.setPopup(popup).togglePopup()\n    }\n    addMarker()\n\n    const sortDestinations = (locations) => {\n      const pointsForDestination = locations.map((destinations) => {\n        return converToPoints(destinations)\n      })\n      const callParameters = {\n        key: 'uBSIqJb79yM8Efb3XuYYGdUJ9IxQRwIf',\n        destinations: pointsForDestination,\n        origins: [converToPoints(origin)],\n      }\n      return new Promise((resolve, reject) => {\n        ttapi.services\n          .matrixRouting(callParameters)\n          .then((matrixAPIResults) => {\n            const results = matrixAPIResults.matrix[0]\n            const resultsArray = results.map((result, index) => {\n              return {\n                location: locations[index],\n                drivingtime: result.response.routeSummary.travelTimeInSeconds,\n              }\n            })\n            resultsArray.sort((a, b) => {\n              return a.drivingtime - b.drivingtime\n            })\n            const sortedLocations = resultsArray.map((result) => {\n              return result.location\n            })\n            resolve(sortedLocations)\n          })\n      })\n    }\n\n\n    const recalculateRoutes = () => {\n      sortDestinations(destinations).then((sorted) => {\n        sorted.unshift(origin)\n\n        ttapi.services\n          .calculateRoute({\n            key: 'uBSIqJb79yM8Efb3XuYYGdUJ9IxQRwIf',\n            locations: sorted,\n          })\n          .then((routeData) => {\n            const geoJson = routeData.toGeoJson()\n            drawRoute(geoJson, map)\n          })\n      })\n    }\n    map.on('click', (e) => {\n      destinations.push(e.lngLat)\n      addDeliveryMarker(e.lngLat, map)\n      recalculateRoutes()\n    })\n\n    return () => map.remove()\n  }, [longitude, latitude])\n\n  return (\n    <>\n      {map &&\n        <div className=\"app\">\n          <div ref={mapElement} className=\"map\">\n          </div>\n          <div className=\"search-bar\">\n            <h1>Where to?</h1>\n            <input type=\"text\" id=\"longitude\" className=\"longitude\"\n              placeholder=\"Enter Longitude\" onChange={(e) => { setLongitude(e.target.value) }} />\n            <input type=\"text\" id=\"latitude\" className=\"latitude\"\n              placeholder=\"Enter Latitude\" onChange={(e) => { setLatitude(e.target.value) }} />\n          </div>          \n          <br></br>\n          <footer> <marquee><h3>Created by Aparna</h3> </marquee> </footer>\n        </div>\n      }\n    </>\n  );\n}\n\nexport default App\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}